LINES = [
b'+IPD,28:~LE\x01\x01\x00\x00\x00\x00\x00;\x00\x00\x00\x00\x00\x00\x7f\xff\xff\xff\x7f\xff\x7f\xff\x94\xb6~\r\n',
b'+IPD,16:~e\x01\x00\x00\x00\x00\xff\xff\xff\xff\xff\xfft\x04~\r\n',
b'+IPD,11:~\x00\x91\x01B\x0c\x00\x009-~\r\n',
b'+IPD,6:~\xcc\x07\x07\xcc~\r\n',
b'+IPD,33:~SX\x01\x01\x01\x04\x02\x05\xff\xff\xff\xff\x01\xf5\x00\x00\x05\x10\x00\x00\x00\x00\x00\x00\x00\x00\x02C\x00\xa9D~\r\n',
b'+IPD,43:~e\x00\x01\xff\xff\xff\xff\xff\xff\xff\xffStratux\x00v1.4r5-991f48eaa\x00\x00\x00\x01\x88\xaa~\r\n',
b'+IPD,32:~\n',
b'\x01\xf0\x00\x00\x1c\xe0\xe3\xb0Z\xb6\xff\xf9\x89\x00\x08\x00*\x01Stratux\x00\x00\x01>~\r\n',
b'+IPD,9:~\x0b\x03\xa9\x00\n',
b'k\x81~\r\n',
b'+IPD,28:~LE\x01\x01\x00\x00\x00\x00\x00;\x00\x00\x00\x00\x00\x00\x7f\xff\xff\xff\x7f\xff\x7f\xff\x94\xb6~\r\n',
b'+IPD,11:~\x00\x91\x01E\x0c\x00\x00\xae\xb4~\r\n',
b'+IPD,6:~\xcc\x07\x07\xcc~\r\n',
b'+IPD,33:~SX\x01\x01\x01\x04\x02\x05\xff\xff\xff\xff\x01\xf5\x00\x00\x05\x10\x00\x00\x00\x00\x00\x00\x00\x00\x02C\x00\xa9D~\r\n',
b'+IPD,43:~e\x00\x01\xff\xff\xff\xff\xff\xff\xff\xffStratux\x00v1.4r5-991f48eaa\x00\x00\x00\x01\x88\xaa~\r\n',
b'+IPD,32:~\n',
b'\x01\xf0\x00\x00\x1c\xe0\xe3\xb0Z\xb6\xff\xf9\x89\x00\x08\x00*\x01Stratux\x00\x00\x01>~\r\n',
b'+IPD,9:~\x0b\x03\xa9\x00\n',
b'k\x81~\r\n',
b'+IPD,16:~e\x01\x00\x00\x00\x00\xff\xff\xff\xff\xff\xfft\x04~\r\n',
b'+IPD,28:~LE\x01\x01\x00\x00\x00\x00\x00;\x00\x00\x00\x00\x00\x00\x7f\xff\xff\xff\x7f\xff\x7f\xff\x94\xb6~\r\n',
b'+IPD,16:~e\x01\x00\x00\x00\x00\xff\xff\xff\xff\xff\xfft\x04~\r\n',
b'+IPD,11:~\x00\x91\x01G\x0c\x00\x00\xcc\xd2~\r\n',
b'+IPD,6:~\xcc\x07\x07\xcc~\r\n',
b'+IPD,33:~SX\x01\x01\x01\x04\x02\x05\xff\xff\xff\xff\x01\xf5\x00\x00\x05\x10\x00\x00\x00\x00\x00\x00\x00\x00\x02C\x00\xa9D~\r\n',
b'+IPD,43:~e\x00\x01\xff\xff\xff\xff\xff\xff\xff\xffStratux\x00v1.4r5-991f48eaa\x00\x00\x00\x01\x88\xaa~\r\n',
b'+IPD,32:~\n',
b'\x01\xf0\x00\x00\x1c\xe0\xe3\xb0Z\xb7\xff\xf9\x89\x00(\x00*\x01Stratux\x00\x00_<~\r\n',
b'+IPD,9:~\x0b\x03\xa9\x00\n',
b'k\x81~\r\n',
b'+IPD,16:~e\x01\x00\x00\x00\x00\xff\xff\xff\xff\xff\xfft\x04~\r\n',
]

def parse_line(line):
    if line.startswith(b'+IPD,'):
        prefix, remaining = line[5:].split(b':')
        length = int(prefix.decode())
        print(f"{length} expected, {len(remaining)} found")



for binary_line in LINES:
    parse_line(binary_line)
